// This file is generated by rust-protobuf 2.2.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PortAcquire {
    // message fields
    pub count: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PortAcquire {
    pub fn new() -> PortAcquire {
        ::std::default::Default::default()
    }

    // int64 count = 1;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i64) {
        self.count = v;
    }

    pub fn get_count(&self) -> i64 {
        self.count
    }
}

impl ::protobuf::Message for PortAcquire {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PortAcquire {
        PortAcquire::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "count",
                    |m: &PortAcquire| { &m.count },
                    |m: &mut PortAcquire| { &mut m.count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PortAcquire>(
                    "PortAcquire",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PortAcquire {
        static mut instance: ::protobuf::lazy::Lazy<PortAcquire> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PortAcquire,
        };
        unsafe {
            instance.get(PortAcquire::new)
        }
    }
}

impl ::protobuf::Clear for PortAcquire {
    fn clear(&mut self) {
        self.clear_count();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PortAcquire {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PortAcquire {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ports {
    // message fields
    pub ports: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Ports {
    pub fn new() -> Ports {
        ::std::default::Default::default()
    }

    // repeated int64 ports = 1;

    pub fn clear_ports(&mut self) {
        self.ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: ::std::vec::Vec<i64>) {
        self.ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ports(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.ports
    }

    // Take field
    pub fn take_ports(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.ports, ::std::vec::Vec::new())
    }

    pub fn get_ports(&self) -> &[i64] {
        &self.ports
    }
}

impl ::protobuf::Message for Ports {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.ports)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ports {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ports {
            os.write_int64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ports {
        Ports::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ports",
                    |m: &Ports| { &m.ports },
                    |m: &mut Ports| { &mut m.ports },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ports>(
                    "Ports",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ports {
        static mut instance: ::protobuf::lazy::Lazy<Ports> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ports,
        };
        unsafe {
            instance.get(Ports::new)
        }
    }
}

impl ::protobuf::Clear for Ports {
    fn clear(&mut self) {
        self.clear_ports();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ports {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ports {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Action {
    // message fields
    pub action: SystemdAction,
    pub insts: ::protobuf::RepeatedField<Instance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Action {
    pub fn new() -> Action {
        ::std::default::Default::default()
    }

    // .agent.SystemdAction action = 1;

    pub fn clear_action(&mut self) {
        self.action = SystemdAction::Restart;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: SystemdAction) {
        self.action = v;
    }

    pub fn get_action(&self) -> SystemdAction {
        self.action
    }

    // repeated .agent.Instance insts = 2;

    pub fn clear_insts(&mut self) {
        self.insts.clear();
    }

    // Param is passed by value, moved
    pub fn set_insts(&mut self, v: ::protobuf::RepeatedField<Instance>) {
        self.insts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_insts(&mut self) -> &mut ::protobuf::RepeatedField<Instance> {
        &mut self.insts
    }

    // Take field
    pub fn take_insts(&mut self) -> ::protobuf::RepeatedField<Instance> {
        ::std::mem::replace(&mut self.insts, ::protobuf::RepeatedField::new())
    }

    pub fn get_insts(&self) -> &[Instance] {
        &self.insts
    }
}

impl ::protobuf::Message for Action {
    fn is_initialized(&self) -> bool {
        for v in &self.insts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.insts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != SystemdAction::Restart {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        for value in &self.insts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.action != SystemdAction::Restart {
            os.write_enum(1, self.action.value())?;
        }
        for v in &self.insts {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Action {
        Action::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SystemdAction>>(
                    "action",
                    |m: &Action| { &m.action },
                    |m: &mut Action| { &mut m.action },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                    "insts",
                    |m: &Action| { &m.insts },
                    |m: &mut Action| { &mut m.insts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Action>(
                    "Action",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Action {
        static mut instance: ::protobuf::lazy::Lazy<Action> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Action,
        };
        unsafe {
            instance.get(Action::new)
        }
    }
}

impl ::protobuf::Clear for Action {
    fn clear(&mut self) {
        self.clear_action();
        self.clear_insts();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CacheInfo {
    // message fields
    pub job_id: ::std::string::String,
    pub cache_type: CacheType,
    pub cluster: ::std::string::String,
    pub version: ::std::string::String,
    pub file_server: ::std::string::String,
    pub insts: ::protobuf::RepeatedField<Instance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CacheInfo {
    pub fn new() -> CacheInfo {
        ::std::default::Default::default()
    }

    // string job_id = 1;

    pub fn clear_job_id(&mut self) {
        self.job_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_job_id(&mut self, v: ::std::string::String) {
        self.job_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_job_id(&mut self) -> &mut ::std::string::String {
        &mut self.job_id
    }

    // Take field
    pub fn take_job_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.job_id, ::std::string::String::new())
    }

    pub fn get_job_id(&self) -> &str {
        &self.job_id
    }

    // .agent.CacheType cache_type = 2;

    pub fn clear_cache_type(&mut self) {
        self.cache_type = CacheType::Redis;
    }

    // Param is passed by value, moved
    pub fn set_cache_type(&mut self, v: CacheType) {
        self.cache_type = v;
    }

    pub fn get_cache_type(&self) -> CacheType {
        self.cache_type
    }

    // string cluster = 3;

    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }

    // string version = 4;

    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    pub fn get_version(&self) -> &str {
        &self.version
    }

    // string file_server = 5;

    pub fn clear_file_server(&mut self) {
        self.file_server.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_server(&mut self, v: ::std::string::String) {
        self.file_server = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_server(&mut self) -> &mut ::std::string::String {
        &mut self.file_server
    }

    // Take field
    pub fn take_file_server(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file_server, ::std::string::String::new())
    }

    pub fn get_file_server(&self) -> &str {
        &self.file_server
    }

    // repeated .agent.Instance insts = 10;

    pub fn clear_insts(&mut self) {
        self.insts.clear();
    }

    // Param is passed by value, moved
    pub fn set_insts(&mut self, v: ::protobuf::RepeatedField<Instance>) {
        self.insts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_insts(&mut self) -> &mut ::protobuf::RepeatedField<Instance> {
        &mut self.insts
    }

    // Take field
    pub fn take_insts(&mut self) -> ::protobuf::RepeatedField<Instance> {
        ::std::mem::replace(&mut self.insts, ::protobuf::RepeatedField::new())
    }

    pub fn get_insts(&self) -> &[Instance] {
        &self.insts
    }
}

impl ::protobuf::Message for CacheInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.insts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.job_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.cache_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file_server)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.insts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        if self.cache_type != CacheType::Redis {
            my_size += ::protobuf::rt::enum_size(2, self.cache_type);
        }
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cluster);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        if !self.file_server.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.file_server);
        }
        for value in &self.insts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        if self.cache_type != CacheType::Redis {
            os.write_enum(2, self.cache_type.value())?;
        }
        if !self.cluster.is_empty() {
            os.write_string(3, &self.cluster)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        if !self.file_server.is_empty() {
            os.write_string(5, &self.file_server)?;
        }
        for v in &self.insts {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CacheInfo {
        CacheInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "job_id",
                    |m: &CacheInfo| { &m.job_id },
                    |m: &mut CacheInfo| { &mut m.job_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CacheType>>(
                    "cache_type",
                    |m: &CacheInfo| { &m.cache_type },
                    |m: &mut CacheInfo| { &mut m.cache_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cluster",
                    |m: &CacheInfo| { &m.cluster },
                    |m: &mut CacheInfo| { &mut m.cluster },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &CacheInfo| { &m.version },
                    |m: &mut CacheInfo| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "file_server",
                    |m: &CacheInfo| { &m.file_server },
                    |m: &mut CacheInfo| { &mut m.file_server },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                    "insts",
                    |m: &CacheInfo| { &m.insts },
                    |m: &mut CacheInfo| { &mut m.insts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CacheInfo>(
                    "CacheInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CacheInfo {
        static mut instance: ::protobuf::lazy::Lazy<CacheInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CacheInfo,
        };
        unsafe {
            instance.get(CacheInfo::new)
        }
    }
}

impl ::protobuf::Clear for CacheInfo {
    fn clear(&mut self) {
        self.clear_job_id();
        self.clear_cache_type();
        self.clear_cluster();
        self.clear_version();
        self.clear_file_server();
        self.clear_insts();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CacheInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instance {
    // message fields
    pub port: i64,
    pub files: ::protobuf::RepeatedField<File>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    // int64 port = 1;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i64) {
        self.port = v;
    }

    pub fn get_port(&self) -> i64 {
        self.port
    }

    // repeated .agent.File files = 2;

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    pub fn get_files(&self) -> &[File] {
        &self.files
    }
}

impl ::protobuf::Message for Instance {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.port = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(1, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.port != 0 {
            os.write_int64(1, self.port)?;
        }
        for v in &self.files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "port",
                    |m: &Instance| { &m.port },
                    |m: &mut Instance| { &mut m.port },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<File>>(
                    "files",
                    |m: &Instance| { &m.files },
                    |m: &mut Instance| { &mut m.files },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Instance>(
                    "Instance",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Instance {
        static mut instance: ::protobuf::lazy::Lazy<Instance> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Instance,
        };
        unsafe {
            instance.get(Instance::new)
        }
    }
}

impl ::protobuf::Clear for Instance {
    fn clear(&mut self) {
        self.clear_port();
        self.clear_files();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct File {
    // message fields
    pub fpath: ::std::string::String,
    pub content: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    // string fpath = 1;

    pub fn clear_fpath(&mut self) {
        self.fpath.clear();
    }

    // Param is passed by value, moved
    pub fn set_fpath(&mut self, v: ::std::string::String) {
        self.fpath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fpath(&mut self) -> &mut ::std::string::String {
        &mut self.fpath
    }

    // Take field
    pub fn take_fpath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fpath, ::std::string::String::new())
    }

    pub fn get_fpath(&self) -> &str {
        &self.fpath
    }

    // string content = 2;

    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }

    pub fn get_content(&self) -> &str {
        &self.content
    }
}

impl ::protobuf::Message for File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fpath)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.fpath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.fpath);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.fpath.is_empty() {
            os.write_string(1, &self.fpath)?;
        }
        if !self.content.is_empty() {
            os.write_string(2, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> File {
        File::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fpath",
                    |m: &File| { &m.fpath },
                    |m: &mut File| { &mut m.fpath },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "content",
                    |m: &File| { &m.content },
                    |m: &mut File| { &mut m.content },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<File>(
                    "File",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static File {
        static mut instance: ::protobuf::lazy::Lazy<File> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const File,
        };
        unsafe {
            instance.get(File::new)
        }
    }
}

impl ::protobuf::Clear for File {
    fn clear(&mut self) {
        self.clear_fpath();
        self.clear_content();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for File {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CacheState {
    // message fields
    pub state: State,
    pub msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CacheState {
    pub fn new() -> CacheState {
        ::std::default::Default::default()
    }

    // .agent.State state = 1;

    pub fn clear_state(&mut self) {
        self.state = State::Done;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    pub fn get_state(&self) -> State {
        self.state
    }

    // string msg = 2;

    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    pub fn get_msg(&self) -> &str {
        &self.msg
    }
}

impl ::protobuf::Message for CacheState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != State::Done {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.state != State::Done {
            os.write_enum(1, self.state.value())?;
        }
        if !self.msg.is_empty() {
            os.write_string(2, &self.msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CacheState {
        CacheState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                    "state",
                    |m: &CacheState| { &m.state },
                    |m: &mut CacheState| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "msg",
                    |m: &CacheState| { &m.msg },
                    |m: &mut CacheState| { &mut m.msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CacheState>(
                    "CacheState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CacheState {
        static mut instance: ::protobuf::lazy::Lazy<CacheState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CacheState,
        };
        unsafe {
            instance.get(CacheState::new)
        }
    }
}

impl ::protobuf::Clear for CacheState {
    fn clear(&mut self) {
        self.clear_state();
        self.clear_msg();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CacheState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SystemdAction {
    Restart = 0,
    Start = 1,
    Stop = 3,
    Remove = 4,
    Setup = 5,
}

impl ::protobuf::ProtobufEnum for SystemdAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SystemdAction> {
        match value {
            0 => ::std::option::Option::Some(SystemdAction::Restart),
            1 => ::std::option::Option::Some(SystemdAction::Start),
            3 => ::std::option::Option::Some(SystemdAction::Stop),
            4 => ::std::option::Option::Some(SystemdAction::Remove),
            5 => ::std::option::Option::Some(SystemdAction::Setup),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SystemdAction] = &[
            SystemdAction::Restart,
            SystemdAction::Start,
            SystemdAction::Stop,
            SystemdAction::Remove,
            SystemdAction::Setup,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SystemdAction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SystemdAction {
}

impl ::std::default::Default for SystemdAction {
    fn default() -> Self {
        SystemdAction::Restart
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemdAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CacheType {
    Redis = 0,
    RedisCluster = 1,
    Memcache = 2,
}

impl ::protobuf::ProtobufEnum for CacheType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CacheType> {
        match value {
            0 => ::std::option::Option::Some(CacheType::Redis),
            1 => ::std::option::Option::Some(CacheType::RedisCluster),
            2 => ::std::option::Option::Some(CacheType::Memcache),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CacheType] = &[
            CacheType::Redis,
            CacheType::RedisCluster,
            CacheType::Memcache,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CacheType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CacheType {
}

impl ::std::default::Default for CacheType {
    fn default() -> Self {
        CacheType::Redis
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum State {
    Done = 0,
    Lost = 1,
    Error = 2,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::Done),
            1 => ::std::option::Option::Some(State::Lost),
            2 => ::std::option::Option::Some(State::Error),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::Done,
            State::Lost,
            State::Error,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("State", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for State {
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::Done
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bagent.proto\x12\x05agent\"#\n\x0bPortAcquire\x12\x14\n\x05count\
    \x18\x01\x20\x01(\x03R\x05count\"\x1d\n\x05Ports\x12\x14\n\x05ports\x18\
    \x01\x20\x03(\x03R\x05ports\"]\n\x06Action\x12,\n\x06action\x18\x01\x20\
    \x01(\x0e2\x14.agent.SystemdActionR\x06action\x12%\n\x05insts\x18\x02\
    \x20\x03(\x0b2\x0f.agent.InstanceR\x05insts\"\xcf\x01\n\tCacheInfo\x12\
    \x15\n\x06job_id\x18\x01\x20\x01(\tR\x05jobId\x12/\n\ncache_type\x18\x02\
    \x20\x01(\x0e2\x10.agent.CacheTypeR\tcacheType\x12\x18\n\x07cluster\x18\
    \x03\x20\x01(\tR\x07cluster\x12\x18\n\x07version\x18\x04\x20\x01(\tR\x07\
    version\x12\x1f\n\x0bfile_server\x18\x05\x20\x01(\tR\nfileServer\x12%\n\
    \x05insts\x18\n\x20\x03(\x0b2\x0f.agent.InstanceR\x05insts\"A\n\x08Insta\
    nce\x12\x12\n\x04port\x18\x01\x20\x01(\x03R\x04port\x12!\n\x05files\x18\
    \x02\x20\x03(\x0b2\x0b.agent.FileR\x05files\"6\n\x04File\x12\x14\n\x05fp\
    ath\x18\x01\x20\x01(\tR\x05fpath\x12\x18\n\x07content\x18\x02\x20\x01(\t\
    R\x07content\"B\n\nCacheState\x12\"\n\x05state\x18\x01\x20\x01(\x0e2\x0c\
    .agent.StateR\x05state\x12\x10\n\x03msg\x18\x02\x20\x01(\tR\x03msg*H\n\r\
    SystemdAction\x12\x0b\n\x07Restart\x10\0\x12\t\n\x05Start\x10\x01\x12\
    \x08\n\x04Stop\x10\x03\x12\n\n\x06Remove\x10\x04\x12\t\n\x05Setup\x10\
    \x05*6\n\tCacheType\x12\t\n\x05Redis\x10\0\x12\x10\n\x0cRedisCluster\x10\
    \x01\x12\x0c\n\x08Memcache\x10\x02*&\n\x05State\x12\x08\n\x04Done\x10\0\
    \x12\x08\n\x04Lost\x10\x01\x12\t\n\x05Error\x10\x022\x98\x01\n\x05Agent\
    \x12/\n\x06Deploy\x12\x10.agent.CacheInfo\x1a\x11.agent.CacheState\"\0\
    \x12.\n\x08DoAction\x12\r.agent.Action\x1a\x11.agent.CacheState\"\0\x12.\
    \n\x08GetPorts\x12\x12.agent.PortAcquire\x1a\x0c.agent.Ports\"\0J\xe8\
    \x0f\n\x06\x12\x04\0\0B\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\r\n\n\n\x02\x06\0\x12\x04\x04\0\x08\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x04\x08\r\n\x0b\n\x04\x06\0\x02\0\x12\x03\x05\x02/\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x06\x0c\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x05\r\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x05!+\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x06\x02.\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x06\x06\x0e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x06\x0f\x15\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03\x06\x20*\n\x0b\n\x04\x06\0\x02\x02\x12\
    \x03\x07\x02.\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x07\x06\x0e\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03\x07\x0f\x1a\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x07%*\n\n\n\x02\x04\0\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\n\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x02\x12\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04\x0b\x02\n\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x08\r\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0b\x10\x11\n\n\n\x02\x04\x01\x12\x04\x0e\0\
    \x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\r\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\x0f\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0f\x02\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x0b\x10\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x0f\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x19\
    \x1a\n\n\n\x02\x05\0\x12\x04\x12\0\x18\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x12\x05\x12\n\x0b\n\x04\x05\0\x02\0\x12\x03\x13\x02\x0e\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03\x13\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x13\
    \x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x14\x02\x0c\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x14\x02\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x14\n\x0b\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x15\x02\x0b\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03\x15\x02\x06\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\
    \x15\t\n\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x16\x02\r\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x16\x02\x08\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x16\x0b\x0c\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x17\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\x17\x02\x07\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03\x17\n\x0b\n\n\n\x02\x04\x02\x12\x04\x1a\0\x1d\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1a\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1b\x03\x1c\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04\x1b\x03\x1a\x10\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x1b\x03\x10\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1b\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1b\x1a\x1b\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x1c\x03\x1f\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03\x1c\x03\x0b\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1c\x0c\x14\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1c\x15\x1a\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x1c\x1d\x1e\n\n\n\x02\x05\x01\x12\x04\x1f\0#\x01\n\
    \n\n\x03\x05\x01\x01\x12\x03\x1f\x05\x0e\n\x0b\n\x04\x05\x01\x02\0\x12\
    \x03\x20\x02\x0c\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x20\x02\x07\n\x0c\
    \n\x05\x05\x01\x02\0\x02\x12\x03\x20\n\x0b\n\x0b\n\x04\x05\x01\x02\x01\
    \x12\x03!\x02\x13\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03!\x02\x0e\n\x0c\
    \n\x05\x05\x01\x02\x01\x02\x12\x03!\x11\x12\n\x0b\n\x04\x05\x01\x02\x02\
    \x12\x03\"\x02\x0f\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\"\x02\n\n\x0c\
    \n\x05\x05\x01\x02\x02\x02\x12\x03\"\r\x0e\n\n\n\x02\x04\x03\x12\x04%\0-\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03%\x08\x11\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03&\x02\x14\n\r\n\x05\x04\x03\x02\0\x04\x12\x04&\x02%\x13\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03&\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03&\x12\x13\n\x0b\n\
    \x04\x04\x03\x02\x01\x12\x03'\x02\x1b\n\r\n\x05\x04\x03\x02\x01\x04\x12\
    \x04'\x02&\x14\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03'\x02\x0b\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03'\x0c\x16\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03'\x19\x1a\n\x0b\n\x04\x04\x03\x02\x02\x12\x03(\x02\x15\n\r\n\
    \x05\x04\x03\x02\x02\x04\x12\x04(\x02'\x1b\n\x0c\n\x05\x04\x03\x02\x02\
    \x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03(\t\x10\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03(\x13\x14\n\x0b\n\x04\x04\x03\x02\
    \x03\x12\x03)\x02\x15\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04)\x02(\x15\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03)\t\x10\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03)\x13\x14\
    \n\x0b\n\x04\x04\x03\x02\x04\x12\x03*\x02\x19\n\r\n\x05\x04\x03\x02\x04\
    \x04\x12\x04*\x02)\x15\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03*\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03*\t\x14\n\x0c\n\x05\x04\x03\x02\
    \x04\x03\x12\x03*\x17\x18\n\x0b\n\x04\x04\x03\x02\x05\x12\x03,\x02\x1f\n\
    \x0c\n\x05\x04\x03\x02\x05\x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x03\x02\
    \x05\x06\x12\x03,\x0b\x13\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03,\x14\
    \x19\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03,\x1c\x1e\n\n\n\x02\x04\x04\
    \x12\x04/\02\x01\n\n\n\x03\x04\x04\x01\x12\x03/\x08\x10\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x030\x02\x11\n\r\n\x05\x04\x04\x02\0\x04\x12\x040\x02/\
    \x12\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x030\x02\x07\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x030\x08\x0c\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x030\x0f\
    \x10\n\x0b\n\x04\x04\x04\x02\x01\x12\x031\x02\x1a\n\x0c\n\x05\x04\x04\
    \x02\x01\x04\x12\x031\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x031\x0b\
    \x0f\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x031\x10\x15\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x031\x18\x19\n\n\n\x02\x04\x05\x12\x044\07\x01\n\n\
    \n\x03\x04\x05\x01\x12\x034\x08\x0c\n\x0b\n\x04\x04\x05\x02\0\x12\x035\
    \x02\x13\n\r\n\x05\x04\x05\x02\0\x04\x12\x045\x024\x0e\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x035\t\
    \x0e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x035\x11\x12\n\x0b\n\x04\x04\x05\
    \x02\x01\x12\x036\x02\x15\n\r\n\x05\x04\x05\x02\x01\x04\x12\x046\x025\
    \x13\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x036\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x036\t\x10\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x036\
    \x13\x14\n\n\n\x02\x05\x02\x12\x049\0=\x01\n\n\n\x03\x05\x02\x01\x12\x03\
    9\x05\n\n\x0b\n\x04\x05\x02\x02\0\x12\x03:\x02\x0b\n\x0c\n\x05\x05\x02\
    \x02\0\x01\x12\x03:\x02\x06\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03:\t\n\n\
    \x0b\n\x04\x05\x02\x02\x01\x12\x03;\x02\x0b\n\x0c\n\x05\x05\x02\x02\x01\
    \x01\x12\x03;\x02\x06\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03;\t\n\n\x0b\
    \n\x04\x05\x02\x02\x02\x12\x03<\x02\x0c\n\x0c\n\x05\x05\x02\x02\x02\x01\
    \x12\x03<\x02\x07\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03<\n\x0b\n\n\n\
    \x02\x04\x06\x12\x04?\0B\x01\n\n\n\x03\x04\x06\x01\x12\x03?\x08\x12\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x03@\x02\x12\n\r\n\x05\x04\x06\x02\0\x04\
    \x12\x04@\x02?\x14\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03@\x02\x07\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03@\x08\r\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03@\x10\x11\n\x0b\n\x04\x04\x06\x02\x01\x12\x03A\x02\x11\n\r\n\x05\
    \x04\x06\x02\x01\x04\x12\x04A\x02@\x12\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03A\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03A\t\x0c\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03A\x0f\x10b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
